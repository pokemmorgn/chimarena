// client/src/main.js - VERSION AVEC DEBUG PR√âCOCE
import Phaser from 'phaser';
import AuthScene from './scenes/AuthScene';
import WelcomeScene from './scenes/WelcomeScene';
import ClashMenuScene from './scenes/ClashMenuScene';
import { auth, config } from './api';
import { LoadingManager } from './utils/LoadingManager.js';
import BattlePanel from './battle/BattlePanel.js';

// üîç IMPORT COLYSEUS T√îT POUR DEBUG
import * as ColyseusManagerModule from './managers/ColyseusManager.js';
const colyseusManager = ColyseusManagerModule.default || ColyseusManagerModule;
window.GameConfig.DEBUG = import.meta.env.DEV;
console.log(">>> MAIN.JS START");

// üîç === EXPOSITION PR√âCOCE DES FONCTIONS DEBUG ===
console.log('üîç EXPOSITION FONCTIONS DEBUG COLYSEUS...');

// Exposer imm√©diatement les fonctions debug
window.debugColyseus = () => {
    console.log('üîç DEBUG COLYSEUS:', colyseusManager.getDebugInfo());
    return colyseusManager.getDebugInfo();
};

window.colyseusHistory = () => {
    colyseusManager.printConnectionHistory();
};

window.colyseusStop = () => {
    console.log('üõë ARR√äT FORC√â COLYSEUS');
    colyseusManager.emergencyStop();
};

window.colyseusReset = () => {
    console.log('üîÑ RESET COMPLET COLYSEUS');
    colyseusManager.fullReset();
};

window.colyseusReconnect = () => {
    console.log('üîÑ FORCE RECONNEXION COLYSEUS');
    colyseusManager.connect();
};

window.colyseusManager = colyseusManager; // Acc√®s direct

console.log('‚úÖ FONCTIONS DEBUG COLYSEUS EXPOS√âES GLOBALEMENT');
console.log('‚ñ∂Ô∏è debugColyseus() - √âtat d√©taill√©');
console.log('‚ñ∂Ô∏è colyseusHistory() - Historique');
console.log('‚ñ∂Ô∏è colyseusStop() - Arr√™t d\'urgence');
console.log('‚ñ∂Ô∏è colyseusReset() - Reset complet');
console.log('‚ñ∂Ô∏è colyseusReconnect() - Force reconnexion');

// üì± D√âTECTION DE L'APPAREIL
const isMobile = () => {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
         window.innerWidth <= 768 ||
         ('ontouchstart' in window);
};

// üì± DIMENSIONS OPTIMIS√âES PORTRAIT (comme Clash Royale)
const getGameDimensions = () => {
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;
  const mobile = isMobile();
  
  // TOUJOURS EN FORMAT PORTRAIT (comme Clash Royale)
  if (mobile) {
    // Mobile : utiliser toute la largeur disponible
    return {
      width: Math.min(screenWidth, 414), // iPhone Pro Max width
      height: Math.min(screenHeight, 896), // iPhone Pro Max height
      portrait: true,
      mobile: true
    };
  } else {
    // PC : format portrait fixe centr√© (comme un t√©l√©phone)
    return {
      width: 400, // Largeur fixe type t√©l√©phone
      height: 700, // Hauteur fixe type t√©l√©phone
      portrait: true,
      mobile: false
    };
  }
};

// Configuration Phaser PORTRAIT UNIVERSEL
const createGameConfig = () => {
  const mobile = isMobile();
  const dimensions = getGameDimensions();
  
  console.log(`üéÆ Mode: ${mobile ? 'Mobile' : 'PC Portrait'} - ${dimensions.width}x${dimensions.height}`);
  
  return {
    type: Phaser.AUTO,
    width: dimensions.width,
    height: dimensions.height,
    parent: 'game-container',
    backgroundColor: '#2c3e50',
    scene: [AuthScene, WelcomeScene, ClashMenuScene],
    render: { 
      antialias: !mobile, // D√©sactiver sur mobile pour performance
      pixelArt: false, 
      roundPixels: true 
    },
    input: { 
      keyboard: true, // Garder clavier sur PC
      mouse: true,
      touch: mobile, // Touch sur mobile uniquement
      gamepad: false 
    },
    audio: { 
      disableWebAudio: mobile // Meilleure compatibilit√© mobile
    },
    physics: { 
      default: 'arcade', 
      arcade: { 
        gravity: { y: 0 }, 
        debug: import.meta.env.DEV // üîÑ Utilise Vite env
      } 
    },
    scale: {
      mode: mobile ? Phaser.Scale.RESIZE : Phaser.Scale.NONE, // PC : taille fixe
      autoCenter: Phaser.Scale.CENTER_BOTH,
      width: dimensions.width,
      height: dimensions.height,
      min: { 
        width: mobile ? 320 : dimensions.width, 
        height: mobile ? 568 : dimensions.height 
      },
      max: { 
        width: mobile ? 414 : dimensions.width, 
        height: mobile ? 896 : dimensions.height 
      }
    },
    fps: { 
      target: mobile ? 30 : 60, // 30 FPS sur mobile pour √©conomiser batterie
      forceSetTimeOut: true 
    },
    // üì± OPTIONS SP√âCIFIQUES
    fullscreenTarget: mobile ? 'game-container' : null,
    disableContextMenu: mobile,
    powerPreference: mobile ? 'low-power' : 'high-performance'
  };
};

class ChimArenaGame {
  constructor() {
    this.game = null;
    this.currentUser = null;
    this.wsConnection = null;
    this.settings = null;
    this.securityMonitor = null;
    this.isMobile = isMobile();
    
    // üîç EXPOSER L'INSTANCE POUR DEBUG
    window.gameInstance = this;
    
    this.init();
  }

  init() {
    console.log(`üéÆ Initialisation ChimArena PORTRAIT ${this.isMobile ? 'MOBILE' : 'PC'}...`);
    
    if (!this.checkWebGLSupport()) {
      window.LoadingManager.showError('WebGL non support√©');
      return;
    }
    
    this.loadStoredData();
    this.setupSecurityMonitoring();
    this.setupPortraitOptimizations();
    this.createGame();
    this.setupGlobalEvents();
    
    // üîç DIAGNOSTIC AUTOMATIQUE APR√àS INIT
    setTimeout(() => {
      this.runDiagnostic();
    }, 2000);
  }

  // üîç === DIAGNOSTIC AUTOMATIQUE ===
  runDiagnostic() {
    console.log('üîç === DIAGNOSTIC AUTOMATIQUE ===');
    
    // √âtat du jeu
    console.log('Game instance:', !!this.game);
    console.log('Scenes:', this.game?.scene?.getScenes()?.map(s => s.scene.key));
    
    // √âtat auth
    console.log('Auth state:', {
      authenticated: auth.isAuthenticated(),
      hasToken: !!auth.getTokenInfo(),
      tokenInfo: auth.getTokenInfo()
    });
    
    // √âtat Colyseus
    console.log('Colyseus state:', colyseusManager.getDebugInfo());
    
    // Registry Phaser
    if (this.game?.registry) {
      console.log('Phaser registry keys:', Object.keys(this.game.registry.list));
    }
    
    console.log('‚úÖ DIAGNOSTIC TERMIN√â - Utilisez debugColyseus() pour plus de d√©tails');
  }

  checkWebGLSupport() {
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      return !!gl;
    } catch {
      return false;
    }
  }

  loadStoredData() {
    try {
      // üîê NE PLUS CHARGER LES TOKENS DEPUIS localStorage
      // Les tokens sont maintenant UNIQUEMENT en m√©moire
      
      // Charger seulement les param√®tres (non sensibles)
      const settings = localStorage.getItem('chimarena_settings');
      if (settings) {
        this.settings = JSON.parse(settings);
      } else {
        this.settings = this.getDefaultSettings();
        this.saveSettings();
      }
      
      // ‚ö†Ô∏è NETTOYER LES ANCIENS TOKENS localStorage SI PR√âSENTS
      this.cleanupOldTokens();
      
      console.log('üìÑ Param√®tres charg√©s (tokens exclus pour s√©curit√©)');
    } catch (err) {
      console.error('‚ùå Erreur chargement donn√©es:', err);
      this.settings = this.getDefaultSettings();
    }
  }

  cleanupOldTokens() {
    // Nettoyer les anciens tokens localStorage de l'ancienne version
    const oldTokenKeys = [
      'chimarena_token',
      'chimarena_refresh_token',
      'chimarena_user',
      'auth_token',
      'access_token',
      'refresh_token'
    ];
    
    let cleanedTokens = 0;
    oldTokenKeys.forEach(key => {
      if (localStorage.getItem(key)) {
        localStorage.removeItem(key);
        cleanedTokens++;
      }
    });
    
    if (cleanedTokens > 0) {
      console.log(`üßπ ${cleanedTokens} anciens tokens nettoy√©s du localStorage`);
      window.NotificationManager?.show('S√©curit√© am√©lior√©e : anciens tokens supprim√©s', 'success');
    }
  }

  setupSecurityMonitoring() {
    console.log('üîê Configuration du monitoring de s√©curit√©...');
    
    // Hook global pour la perte d'authentification
    config.onAuthenticationLost((reason) => {
      console.warn('üö® S√âCURIT√â : Authentification perdue -', reason);
      this.handleAuthenticationLoss(reason);
    });

    // Hook global pour le refresh de token
    config.onTokenRefreshed(() => {
      console.log('üîÑ S√âCURIT√â : Token rafra√Æchi automatiquement');
      this.updateSecurityStatus();
    });

    // Monitoring p√©riodique de l'√©tat de s√©curit√©
    this.startSecurityMonitoring();
  }

  startSecurityMonitoring() {
    this.securityMonitor = setInterval(() => {
      this.checkSecurityStatus();
    }, 30000); // V√©rification toutes les 30 secondes
  }

  checkSecurityStatus() {
    const debugInfo = config.getDebugInfo();
    
    if (!debugInfo) return;

    // V√©rifier si le token expire bient√¥t
    if (debugInfo.timeToExpiry && debugInfo.timeToExpiry < 2 * 60 * 1000) { // 2 minutes
      console.warn('‚ö†Ô∏è Token expire dans moins de 2 minutes');
      this.updateSecurityStatus('warning');
    }

    // V√©rifier l'√©tat global
    if (!debugInfo.isAuthenticated && (this.game.scene.isActive('WelcomeScene') || this.game.scene.isActive('ClashMenuScene'))) {
      console.error('‚ùå √âtat incoh√©rent: Sc√®ne authentifi√©e active mais non authentifi√©');
      this.handleAuthenticationLoss('√âtat de session incoh√©rent');
    }
  }

  updateSecurityStatus(level = 'normal') {
    // Mettre √† jour l'indicateur visuel si n√©cessaire
    const colors = {
      normal: '#2ecc71',
      warning: '#f39c12',
      error: '#e74c3c'
    };
    
    // Cette m√©thode peut √™tre utilis√©e pour mettre √† jour l'UI
    // selon l'√©tat de s√©curit√©
  }

  handleAuthenticationLoss(reason) {
    console.error('üö® Gestion de la perte d\'authentification:', reason);
    
    // Nettoyer les donn√©es sensibles
    this.clearAuthData();
    
    // üîç AUSSI NETTOYER COLYSEUS
    console.log('üåê Nettoyage Colyseus apr√®s perte auth...');
    if (colyseusManager.isColyseusConnected()) {
      colyseusManager.disconnect();
    }
    
    // Rediriger vers AuthScene
    if (this.game && (this.game.scene.isActive('WelcomeScene') || this.game.scene.isActive('ClashMenuScene'))) {
      this.game.scene.start('AuthScene');
    }
    
    // Notifier l'utilisateur
    window.NotificationManager?.error(`Session expir√©e: ${reason}`);
  }

  // üì± OPTIMISATIONS FORMAT PORTRAIT
  setupPortraitOptimizations() {
    console.log('üì± Configuration format portrait universel...');
    
    if (this.isMobile) {
      // Emp√™cher le zoom sur mobile
      const viewport = document.querySelector('meta[name="viewport"]');
      if (viewport) {
        viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover');
      }
      
      // Emp√™cher le d√©filement/rebond sur iOS
      document.body.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
      document.body.style.width = '100%';
      document.body.style.height = '100%';
      
      // Masquer la barre d'adresse sur mobile
      setTimeout(() => {
        window.scrollTo(0, 1);
      }, 100);
      
      // Optimisations performance mobile
      this.settings = {
        ...this.getDefaultSettings(),
        graphics: {
          quality: 'medium',
          particles: false,
          animations: true,
          shadows: false
        }
      };
    } else {
      // PC : centrer le jeu et ajouter un fond
      document.body.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
      document.body.style.display = 'flex';
      document.body.style.justifyContent = 'center';
      document.body.style.alignItems = 'center';
      document.body.style.minHeight = '100vh';
      document.body.style.margin = '0';
      document.body.style.padding = '20px';
      
      // Style du container de jeu sur PC
      const gameContainer = document.getElementById('game-container');
      if (gameContainer) {
        gameContainer.style.boxShadow = '0 10px 30px rgba(0,0,0,0.3)';
        gameContainer.style.borderRadius = '15px';
        gameContainer.style.overflow = 'hidden';
        gameContainer.style.border = '2px solid rgba(255,255,255,0.1)';
      }
    }
  }

  getDefaultSettings() {
    return {
      audio: { masterVolume: 0.8, musicVolume: 0.7, sfxVolume: 0.9, muted: false },
      graphics: { quality: 'high', particles: true, animations: true, shadows: true },
      gameplay: { autoSelectCards: false, fastMode: false, showDamageNumbers: true, confirmActions: true },
      interface: { language: 'fr', theme: 'default', showTooltips: true, compactMode: false },
      security: { autoLockMinutes: 60, requireConfirmForSensitiveActions: true, enableSecurityNotifications: true },
      crypto: { showWalletWarnings: true, confirmTransactions: true, maxDailyWithdrawals: 5 }
    };
  }

  saveSettings() {
    try {
      localStorage.setItem('chimarena_settings', JSON.stringify(this.settings));
    } catch (err) {
      console.error('‚ùå Erreur sauvegarde param√®tres:', err);
    }
  }

  createGame() {
    try {
      const gameConfig = createGameConfig();
      
      // Ajuster la qualit√© selon l'appareil
      if (this.isMobile) {
        gameConfig.render.antialias = false;
        gameConfig.fps.target = 30;
      }
      
      this.game = new Phaser.Game(gameConfig);
      
      // Enregistrer les donn√©es dans le registry Phaser
      this.game.registry.set('gameInstance', this);
      this.game.registry.set('currentUser', this.currentUser);
      this.game.registry.set('settings', this.settings);
      this.game.registry.set('colyseusManager', colyseusManager); // üîç EXPOSER COLYSEUS
      
      console.log('üéÆ Jeu Phaser cr√©√© avec ClashMenuScene + s√©curit√© int√©gr√©e + PORTRAIT');
      this.simulateLoading();
    } catch (err) {
      console.error('‚ùå Erreur cr√©ation jeu:', err);
      window.LoadingManager.showError('Impossible de cr√©er le jeu');
    }
  }

  simulateLoading() {
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 20;
      if (progress >= 100) {
        progress = 100;
        clearInterval(interval);
      }
      LoadingManager.updateProgress(progress, 100);
    }, 200);
  }

  setupGlobalEvents() {
    // Gestion de la visibilit√© de l'onglet avec s√©curit√©
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        this.onGamePause();
      } else {
        this.onGameResume();
      }
    });
    
    // Redimensionnement adapt√© au portrait
    window.addEventListener('resize', () => { 
      if (this.game) {
        this.game.scale.refresh();
        
        // Repositionner si n√©cessaire sur mobile
        if (this.isMobile) {
          setTimeout(() => {
            window.scrollTo(0, 1);
          }, 100);
        }
      }
    });
    
    // Gestion de l'orientation sur mobile
    window.addEventListener('orientationchange', () => {
      if (this.isMobile) {
        setTimeout(() => {
          window.scrollTo(0, 1);
          if (this.game) {
            this.game.scale.refresh();
          }
        }, 500);
      }
    });
    
    // Fermeture avec nettoyage s√©curis√©
    window.addEventListener('beforeunload', () => this.onGameClose());
    
    // D√©tection de tentatives de manipulation du localStorage
    window.addEventListener('storage', (e) => {
      if (e.key && e.key.includes('token')) {
        console.warn('üö® Tentative de manipulation de token d√©tect√©e');
      }
    });
    
    console.log('üéØ √âv√©nements globaux s√©curis√©s configur√©s');
  }

  onGamePause() { 
    console.log('‚è∏Ô∏è Jeu en pause');
    
    // V√©rification de s√©curit√© lors de la pause
    const debugInfo = config.getDebugInfo();
    if (debugInfo && debugInfo.timeToExpiry < 5 * 60 * 1000) { // 5 minutes
      console.warn('‚ö†Ô∏è Token expire bient√¥t, refresh recommand√©');
    }
  }
  
  onGameResume() { 
    console.log('‚ñ∂Ô∏è Jeu repris');
    
    // Masquer √† nouveau la barre d'adresse sur mobile
    if (this.isMobile) {
      setTimeout(() => {
        window.scrollTo(0, 1);
      }, 100);
    }
    
    // V√©rification de s√©curit√© lors de la reprise
    if (auth.isAuthenticated()) {
      this.checkSecurityStatus();
    }
  }
  
  onGameClose() {
    console.log('üö™ Fermeture s√©curis√©e du jeu');
    this.cleanup();
  }

  cleanup() {
    // Nettoyer le monitoring
    if (this.securityMonitor) {
      clearInterval(this.securityMonitor);
      this.securityMonitor = null;
    }
    
    // üîç NETTOYER COLYSEUS
    if (colyseusManager.isColyseusConnected()) {
      colyseusManager.disconnect();
    }
    
    console.log('üßπ Nettoyage s√©curis√© termin√©');
  }

  // --- M√©thodes d'interface pour les sc√®nes ---
  
  clearAuthData() {
    console.log('üßπ Nettoyage des donn√©es d\'authentification');
    this.currentUser = null;
    this.game?.registry.set('currentUser', null);
  }

  setCurrentUser(user) {
    console.log('üë§ Mise √† jour des donn√©es utilisateur');
    this.currentUser = user;
    this.game?.registry.set('currentUser', user);
  }

  isAuthenticated() {
    return auth.isAuthenticated();
  }

  getUserWalletInfo() {
    return this.currentUser?.cryptoWallet || null;
  }

  updateUserWalletInfo(walletInfo) {
    if (this.currentUser) {
      this.currentUser.cryptoWallet = walletInfo;
      this.game?.registry.set('currentUser', this.currentUser);
    }
  }

  getSecurityDebugInfo() {
    if (import.meta.env.DEV) { // üîÑ Utilise Vite env
      return {
        apiDebug: config.getDebugInfo(),
        gameInstance: {
          currentUser: !!this.currentUser,
          wsConnection: !!this.wsConnection,
          securityMonitor: !!this.securityMonitor,
        },
        tokenInfo: auth.getTokenInfo(),
        colyseusDebug: colyseusManager.getDebugInfo(), // üîç AJOUT
      };
    }
    return null;
  }

  handleError(error, context = '') {
    console.error(`‚ùå Erreur ${context}:`, error);
    
    // Gestion sp√©cifique des erreurs d'authentification
    if (error.message.includes('session') || error.message.includes('token') || error.status === 401) {
      this.handleAuthenticationLoss(error.message);
    } else {
      window.NotificationManager?.error(error.message || 'Erreur inattendue');
    }
  }
}

// --- Utils globaux (mis √† jour pour Vite) ---
window.GameUtils = {
  formatNumber: (n) => n >= 1e6 ? (n/1e6).toFixed(1)+'M' : n >= 1e3 ? (n/1e3).toFixed(1)+'K' : n.toString(),
  formatTime: (s) => `${Math.floor(s/60)}:${(s%60).toString().padStart(2,'0')}`,
  generateId: () => Date.now().toString(36) + Math.random().toString(36).substr(2),
  isValidEmail: (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email),
  
  sanitizeInput: (input) => {
    if (typeof input !== 'string') return input;
    return input.replace(/[<>'"&]/g, '');
  },
  
  validateUsername: (username) => {
    return /^[a-zA-Z0-9_]{3,20}$/.test(username);
  },

  isValidEthereumAddress: (address) => {
    return /^0x[a-fA-F0-9]{40}$/.test(address);
  },

  formatEthereumAddress: (address) => {
    if (!address || address.length < 10) return address;
    return `${address.slice(0, 6)}...${address.slice(-4)}`;
  },

  formatCryptoAmount: (amount, decimals = 4) => {
    if (!amount || isNaN(amount)) return '0';
    return parseFloat(amount).toFixed(decimals);
  },

  isMobileDevice: () => {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
           window.innerWidth <= 768 ||
           ('ontouchstart' in window);
  },

  getOptimalFontSize: (baseSize, isMobile) => {
    return isMobile ? `${Math.max(parseInt(baseSize) * 0.8, 10)}px` : baseSize;
  },

  getOptimalSpacing: (baseSpacing, isMobile) => {
    return isMobile ? baseSpacing * 0.7 : baseSpacing;
  }
};

// Configuration mise √† jour pour Vite
window.GameConstants = {
  ARENA: { WIDTH: 400, HEIGHT: 700, BRIDGE_Y: 350 },
  CARDS: { DECK_SIZE: 8, HAND_SIZE: 4, MAX_LEVEL: 14 },
  BATTLE: { DURATION: 180, OVERTIME_DURATION: 60, ELIXIR_MAX: 10, ELIXIR_REGEN: 1000 },
  COLORS: { PRIMARY: 0x3498db, SECONDARY: 0x2ecc71, DANGER: 0xe74c3c, WARNING: 0xf39c12, DARK: 0x2c3e50, LIGHT: 0xecf0f1 },
  
  SECURITY: {
    TOKEN_REFRESH_THRESHOLD: 2 * 60 * 1000,
    MAX_IDLE_TIME: 60 * 60 * 1000,
    SESSION_CHECK_INTERVAL: 30 * 1000,
  },

  CRYPTO: {
    SIGNATURE_VALIDITY: 5 * 60 * 1000,
    MAX_WALLET_CONNECTIONS_PER_HOUR: 3,
    MAX_CRYPTO_ACTIONS_PER_HOUR: 5,
    WITHDRAWAL_COOLDOWN: 24 * 60 * 60 * 1000,
    SUPPORTED_NETWORKS: {
      ETHEREUM: 1,
      POLYGON: 137,
      BSC: 56
    }
  },

  UI: {
    MOBILE_BREAKPOINT: 768,
    PORTRAIT_WIDTH: 400,
    PORTRAIT_HEIGHT: 700,
    HEADER_HEIGHT: 60,
    FOOTER_HEIGHT: 80,
    BUTTON_HEIGHT_MOBILE: 35,
    BUTTON_HEIGHT_DESKTOP: 40,
    FONT_SCALE_MOBILE: 0.8
  }
};

// --- Entr√©e principale s√©curis√©e avec Vite ---
document.addEventListener('DOMContentLoaded', () => {
  console.log('üöÄ DOM charg√©, d√©marrage de ChimArena avec Vite...');
  
  // V√©rifier la compatibilit√© de s√©curit√©
  if (!window.crypto || !window.crypto.getRandomValues) {
    console.error('‚ùå API de s√©curit√© non disponible');
    window.LoadingManager?.showError('Navigateur non compatible avec les fonctionnalit√©s de s√©curit√©');
    return;
  }

  // V√©rifier disponibilit√© MetaMask
  if (typeof window.ethereum !== 'undefined') {
    console.log('ü¶ä MetaMask d√©tect√©');
    window.GameConstants.CRYPTO.METAMASK_AVAILABLE = true;
  } else {
    console.log('‚ö†Ô∏è MetaMask non d√©tect√© - Fonctionnalit√©s crypto limit√©es');
    window.GameConstants.CRYPTO.METAMASK_AVAILABLE = false;
  }

  // D√©tecter le mode d'affichage
  const mobile = isMobile();
  console.log(`üì± Appareil d√©tect√©: ${mobile ? 'MOBILE' : 'PC'} - Mode PORTRAIT activ√©`);
  
   // üåê CONFIGURATION GLOBALE DU JEU
  window.GameConfig = {
    // URLs selon l'environnement
    API_URL: import.meta.env.VITE_API_URL || 'https://chimarena.cloud/api',
    COLYSEUS_URL: import.meta.env.VITE_COLYSEUS_URL || 'wss://chimarena.cloud/ws',
    
    // Pour d√©veloppement local, d√©commenter :
    // API_URL: 'http://localhost:3000/api',
    // COLYSEUS_URL: 'ws://localhost:2567',
    
    // Optimisations mobile
    MOBILE_OPTIMIZED: isMobile(),
    
    // Features
    FEATURES: {
      COLYSEUS_ENABLED: true,
      CRYPTO_ENABLED: true,
      DEBUG_ENABLED: import.meta.env.DEV
    }
  };
  
  console.log('‚öôÔ∏è GameConfig initialis√©:', window.GameConfig); 
  
  // Cr√©er l'instance de jeu s√©curis√©e
  window.ChimArenaInstance = new ChimArenaGame();
  
  console.log('‚úÖ ChimArena avec Vite initialis√©');
  console.log('üîê Tokens stock√©s UNIQUEMENT en m√©moire');
  console.log('üõ°Ô∏è Monitoring de s√©curit√© actif');
  console.log('üì± Mode PORTRAIT universel activ√©');
  console.log('üí∞ Support crypto: ' + (window.GameConstants.CRYPTO.METAMASK_AVAILABLE ? 'ACTIV√â' : 'LIMIT√â'));
  console.log('üèÜ Menu Clash Royale authentique pr√™t !');
  console.log('‚ö° Vite HMR activ√© pour d√©veloppement');
  
  // üîç === FONCTIONS DEBUG SUPPL√âMENTAIRES ===
  
  // Debug complet de l'application
  window.debugApp = () => {
    console.group('üîç === DEBUG APPLICATION COMPL√àTE ===');
    
    // √âtat g√©n√©ral
    console.log('üéÆ ChimArenaInstance:', !!window.ChimArenaInstance);
    console.log('üéÆ Game Phaser:', !!window.ChimArenaInstance?.game);
    
    // Sc√®nes
    if (window.ChimArenaInstance?.game?.scene) {
      const scenes = window.ChimArenaInstance.game.scene.getScenes();
      console.log('üé¨ Sc√®nes actives:', scenes.map(s => ({
        key: s.scene.key,
        active: s.scene.isActive(),
        visible: s.scene.isVisible()
      })));
    }
    
    // Auth
    console.log('üîê Authentification:', {
      isAuthenticated: auth.isAuthenticated(),
      tokenInfo: auth.getTokenInfo(),
      apiDebug: config.getDebugInfo()
    });
    
    // Colyseus
    console.log('üåê Colyseus:', colyseusManager.getDebugInfo());
    
    // Registry Phaser
    if (window.ChimArenaInstance?.game?.registry) {
      console.log('üìä Registry Phaser:', window.ChimArenaInstance.game.registry.list);
    }
    
    console.groupEnd();
    
    return {
      game: !!window.ChimArenaInstance?.game,
      scenes: window.ChimArenaInstance?.game?.scene?.getScenes()?.map(s => s.scene.key),
      auth: auth.isAuthenticated(),
      colyseus: colyseusManager.isColyseusConnected()
    };
  };
  
  // Test connexion Colyseus forc√©e
  window.testColyseusConnection = async () => {
    console.log('üß™ TEST CONNEXION COLYSEUS FORC√âE...');
    
    try {
      // V√©rifier auth d'abord
      if (!auth.isAuthenticated()) {
        console.error('‚ùå Pas authentifi√© pour test Colyseus');
        return false;
      }
      
      // Forcer d√©connexion
      console.log('üîå D√©connexion forc√©e...');
      await colyseusManager.forceDisconnect();
      
      // Attendre un peu
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Reconnecter
      console.log('üîå Reconnexion...');
      const success = await colyseusManager.connect();
      
      console.log('‚úÖ Test termin√©:', success ? 'SUCC√àS' : '√âCHEC');
      return success;
      
    } catch (error) {
      console.error('‚ùå Erreur test Colyseus:', error);
      return false;
    }
  };
  
  // Forcer une sc√®ne sp√©cifique
  window.forceScene = (sceneName) => {
    if (window.ChimArenaInstance?.game?.scene) {
      console.log(`üé¨ Force scene: ${sceneName}`);
      window.ChimArenaInstance.game.scene.start(sceneName);
    } else {
      console.error('‚ùå Pas de game/scene disponible');
    }
  };
  
  // Debug en d√©veloppement
  if (import.meta.env.DEV) {
    console.log('üîß Mode debug Vite activ√©');
    
    // Exposer auth et config globalement pour debug
    window.auth = auth;
    window.config = config;
    
    // Function de debug s√©curit√©
    window.getSecurityDebug = () => window.ChimArenaInstance?.getSecurityDebugInfo();
    
    // Auto-diagnostic au d√©marrage
    setTimeout(() => {
      console.log('üîç AUTO-DIAGNOSTIC AU D√âMARRAGE:');
      window.debugApp();
    }, 3000);
  }
  
  console.log(`
üéØ === FONCTIONS DEBUG DISPONIBLES ===

üîç G√âN√âRAL:
‚ñ∂Ô∏è debugApp() - √âtat complet de l'application
‚ñ∂Ô∏è debugColyseus() - √âtat d√©taill√© Colyseus
‚ñ∂Ô∏è colyseusHistory() - Historique connexions

üß™ TESTS:
‚ñ∂Ô∏è testColyseusConnection() - Test connexion forc√©e
‚ñ∂Ô∏è forceScene('AuthScene') - Forcer une sc√®ne

üõ†Ô∏è CONTR√îLES:
‚ñ∂Ô∏è colyseusStop() - Arr√™t d'urgence Colyseus
‚ñ∂Ô∏è colyseusReset() - Reset complet Colyseus
‚ñ∂Ô∏è colyseusReconnect() - Force reconnexion

üîê S√âCURIT√â (DEV):
‚ñ∂Ô∏è getSecurityDebug() - Debug s√©curit√© complet
‚ñ∂Ô∏è auth.getTokenInfo() - Info token JWT
‚ñ∂Ô∏è config.getDebugInfo() - Debug API client

ESSAYEZ: debugColyseus() pour voir l'√©tat Colyseus !
  `);
});

export default ChimArenaGame;
