import path from "path";
import fs from "fs";
import dotenv from "dotenv";

// üö® LOGS FORC√âS PARTOUT - IMPOSSIBLES √Ä RATER
console.log("üöÄüöÄüöÄ D√âMARRAGE CHIMARENA - LOGS FORC√âS üöÄüöÄüöÄ");
console.log("üìÖ Timestamp:", new Date().toISOString());
console.log("üìÅ CWD:", process.cwd());
console.log("üìÅ __dirname:", __dirname);
console.log("üîß Node version:", process.version);

// Charger .env AVEC LOGS
const envPath = path.join(__dirname, "../.env");
console.log("üìã Tentative chargement .env:", envPath);
console.log("üìã .env existe?", fs.existsSync(envPath));
dotenv.config({ path: envPath });
console.log("‚úÖ .env charg√©");

// V√©rifier variables critiques
console.log("=== VARIABLES ENVIRONNEMENT ===");
console.log("- MONGODB_URI:", process.env.MONGODB_URI ? "‚úÖ OK" : "‚ùå MANQUANT");
console.log("- JWT_ACCESS_SECRET:", process.env.JWT_ACCESS_SECRET ? "‚úÖ OK" : "‚ùå MANQUANT");
console.log("- JWT_REFRESH_SECRET:", process.env.JWT_REFRESH_SECRET ? "‚úÖ OK" : "‚ùå MANQUANT");
console.log("- NODE_ENV:", process.env.NODE_ENV || "‚ùå NON D√âFINI");
console.log("- PORT:", process.env.PORT || "‚ùå NON D√âFINI");

// V√©rifier le config.json
const configPath = path.join(process.cwd(), 'config.json');
console.log("üîß Chemin config.json:", configPath);
console.log("üîß config.json existe?", fs.existsSync(configPath));

if (fs.existsSync(configPath)) {
  try {
    const configContent = fs.readFileSync(configPath, 'utf8');
    console.log("üìÑ Taille config.json:", configContent.length, "caract√®res");
    
    const config = JSON.parse(configContent);
    console.log("üìÑ Config pars√© - logging.level:", config.logging?.level);
    console.log("üìÑ Config pars√© - console.enabled:", config.logging?.output?.console?.enabled);
  } catch (error) {
    console.error("‚ùå ERREUR LECTURE config.json:", (error as Error).message);
  }
} else {
  console.error("‚ùå config.json INTROUVABLE!");
}

// Handler d'erreur AVANT tout
process.on('uncaughtException', (error) => {
  console.error('üí•üí•üí• ERREUR NON G√âR√âE:', error.message);
  console.error('üí•üí•üí• Stack:', error.stack);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí•üí•üí• PROMESSE REJET√âE:', reason);
});

// Fonction de d√©marrage avec try/catch partout
async function startServerWithDebug() {
  console.log("üöÄ startServerWithDebug() appel√©e");
  
  try {
    console.log("üì¶ Import @colyseus/tools...");
    const { listen } = await import("@colyseus/tools");
    console.log("‚úÖ @colyseus/tools import√©");

    console.log("üì¶ Import app.config...");
    const configModule = await import("./app.config");
    const config = configModule.default;
    console.log("‚úÖ app.config import√©");

    // Tenter d'initialiser ConfigManager
    console.log("üîß Tentative import ConfigManager...");
    try {
      const { configManager } = await import('./config/ConfigManager');
      console.log("‚úÖ ConfigManager import√©");
      
      console.log("üîß Tentative initialisation ConfigManager...");
      await configManager.initialize();
      console.log("‚úÖ ConfigManager initialis√© avec succ√®s");
      
      // Tester le logger
      console.log("üìù Import Logger...");
      const { logger } = await import('./utils/Logger');
      console.log("‚úÖ Logger import√©");
      
      logger.general.info("üéâ LOGGER FONCTIONNE!");
      logger.api.debug("üéâ LOGGER API FONCTIONNE!");
      console.log("‚úÖ Logger test√© avec succ√®s");
      
    } catch (configError) {
      console.error("‚ùå ERREUR ConfigManager/Logger:", (configError as Error).message);
      console.error("‚ùå Stack ConfigManager:", (configError as Error).stack);
      console.log("‚ö†Ô∏è Continuons sans ConfigManager...");
    }

    // Connecter base de donn√©es
    console.log("üîå Tentative connexion base de donn√©es...");
    try {
      const dbModule = await import('./config/database.js');
      await dbModule.connectDatabase();
      console.log("‚úÖ Base de donn√©es connect√©e");
    } catch (dbError) {
      console.error("‚ùå ERREUR BDD:", (dbError as Error).message);
      console.log("‚ö†Ô∏è Continuons sans BDD...");
    }

    // D√©marrer serveur
    const port = parseInt(process.env.PORT || "3000", 10);
    console.log(`üöÄ D√©marrage serveur Colyseus sur port ${port}...`);
    
    await listen(config, port);
    
    console.log("‚úÖ‚úÖ‚úÖ SERVEUR D√âMARR√â AVEC SUCC√àS ‚úÖ‚úÖ‚úÖ");
    console.log(`‚úÖ Port: ${port}`);
    console.log(`‚úÖ PID: ${process.pid}`);
    console.log(`‚úÖ Timestamp: ${new Date().toISOString()}`);

  } catch (error) {
    console.error("üí•üí•üí• ERREUR FATALE:");
    console.error("üí• Message:", (error as Error)?.message);
    console.error("üí• Stack:", (error as Error)?.stack);
    console.error("üí• Type:", typeof error);
    console.error("üí• Constructor:", (error as Error)?.constructor?.name);
    
    process.exit(1);
  }
}

// Log p√©riodique pour prouver que le serveur tourne
let heartbeatCount = 0;
setInterval(() => {
  heartbeatCount++;
  console.log(`‚ù§Ô∏è HEARTBEAT ${heartbeatCount} - ${new Date().toISOString()} - Uptime: ${Math.floor(process.uptime())}s - Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);
}, 10000); // Toutes les 10 secondes

console.log("üöÄ Appel startServerWithDebug()...");
startServerWithDebug();
